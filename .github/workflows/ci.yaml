on:
  pull_request:
  push:
    branches:
      - main

name: Bowbend CI

jobs:
  build-release:
    name: Build Release Packages
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Setup cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.62.1
          override: true
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      # TODO: We should find a way to use the cffi called out in the pyproject.toml
      - name: Install cffi
        run: pip install cffi==1.15.1
      - name: Build
        run: cargo xtask build --release
      - uses: actions/upload-artifact@v3
        with:
          name: python-release-wheels
          path: |
            target/wheels/bowbend-*.whl
            target/wheels/bowbend-*.tar.gz
  build-debug:
    name: Build Debug Packages
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Setup cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-nightly-${{ hashFiles('**/Cargo.lock') }}
      # We need nightly for asan
      - name: Install Rust nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      # TODO: We should find a way to use the cffi called out in the pyproject.toml
      - name: Install cffi
        run: pip install cffi==1.15.1
      - name: Build
        run: cargo xtask build --asan
      - uses: actions/upload-artifact@v3
        with:
          name: python-debug-wheels
          path: |
            target/wheels/bowbend-*.whl
            target/wheels/bowbend-*.tar.gz
  unit-test:
    name: Unit Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    needs: build-release
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Setup cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/caUnit Teche/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.62.1
          override: true
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Fetch Python wheels
        uses: actions/download-artifact@v2
        with:
          name: python-release-wheels
      - name: Install Python format tools
        run: ls bowbend-*linux*x86_64.whl | awk '{print $1"[test]"}' | xargs -0  pip install
      - name: Run unit tests
        run: cargo xtask test
  integration-test:
    name: Integration Tests
    needs: build-release
    # We aren't able to run vagrant inside the linux runners.  Using the macOS runner lets us get around the problem of
    # running a VM in a VM.  This is such an expensive way to just run some VMs.
    runs-on: macos-10.15
    timeout-minutes: 30
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: ~/.vagrant.d/boxes
          key: ${{ runner.os }}-vagrant-${{ hashFiles('Vagrantfile') }}
      - name: Install vagrant plugins
        run: vagrant plugin install vagrant-hosts
      - name: Run vagrant up
        run: vagrant up --provider virtualbox
      - name: Fetch Python wheels
        uses: actions/download-artifact@v2
        with:
          name: python-release-wheels
      - name: Run python integration test
        run: vagrant ssh -c 'ls -d /vagrant/bowbend-*linux*x86_64.whl | xargs -0  sudo pip install && sudo python3 /vagrant/sdks/python/integration/integration_test.py'
  integration-test-with-asan:
    name: Debug Integration Tests
    needs: build-debug
    # We aren't able to run vagrant inside the linux runners.  Using the macOS runner lets us get around the problem of
    # running a VM in a VM.  This is such an expensive way to just run some VMs.
    runs-on: macos-10.15
    timeout-minutes: 30
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: ~/.vagrant.d/boxes
          key: ${{ runner.os }}-vagrant-${{ hashFiles('Vagrantfile') }}
      - name: Install vagrant plugins
        run: vagrant plugin install vagrant-hosts
      - name: Run vagrant up
        run: vagrant up --provider virtualbox
      - name: Fetch Python wheels
        uses: actions/download-artifact@v2
        with:
          name: python-debug-wheels
      - name: Run python integration test
        run: vagrant ssh -c 'ls -d /vagrant/bowbend-*linux*x86_64.whl | xargs -0  sudo pip install && sudo PYTHONMALLOC=malloc LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libasan.so.6 python3 /vagrant/sdks/python/integration/integration_test.py'
  lint:
    name: Lint
    needs: build-release
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Setup cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.62.1
          override: true
          components: clippy
      - name: Fetch Python wheels
        uses: actions/download-artifact@v2
        with:
          name: python-release-wheels
      - name: Install Python lint tools
        run: ls bowbend-*linux*x86_64.whl | awk '{print $1"[lint,test]"}' | xargs -0  pip install
      - name: Run lints
        run: cargo xtask lint
  format:
    name: Format
    needs: build-release
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Setup cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-nightly-${{ hashFiles('**/Cargo.lock') }}
      # We only use nightly for a couple rustfmt features
      - name: Install Rust nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt
      - name: Fetch Python wheels
        uses: actions/download-artifact@v2
        with:
          name: python-release-wheels
      - name: Install Python format tools
        run: ls bowbend-*linux*x86_64.whl | awk '{print $1"[lint,test]"}' | xargs -0  pip install
      - name: Run lints
        run: cargo xtask format
  spellcheck:
    name: Spellcheck
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Setup cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.62.1
          override: true
      - name: Install cargo spellcheck
        run: wget -O ~/.cargo/bin/cargo-spellcheck https://github.com/drahnr/cargo-spellcheck/releases/download/v0.12.2/x86_64-unknown-linux-gnu-cargo-spellcheck-v0.12.2 && chmod +x ~/.cargo/bin/cargo-spellcheck
      - name: Run spellcheck
        run: cargo xtask spellcheck
